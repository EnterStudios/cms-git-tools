#! /bin/bash -e
# Mimics addpkg behavior in git.

case `uname` in
  Darwin)
    ECHO="echo" ;;
  *)
    ECHO="echo -e" ;;
esac

usage () {
  $ECHO "git cms-addpkg [options] Subsystem/Package [Subsystem/Package ...] "
  $ECHO "git cms-addpkg [options] -f FILE"
  $ECHO
  $ECHO "Options:"
  $ECHO "-h                 \tthis help message"
  $ECHO
  $ECHO "-d, --debug        \tenable debug output"
  $ECHO "-f, --file FILE    \tread the list of packages to be checkoed out from FILE"
  $ECHO "    --https        \tuse https, rather than ssh to access your personal repository"
  $ECHO "    --ssh          \tuse ssh, rather than https to access the official repository"
  $ECHO "-q, --quiet, -z    \tdo not print out progress"
  $ECHO "-y, --yes          \tassume yes to all questions"
  exit $1
}

DEBUG=0
VERBOSE=1
INITOPTIONS=""                      # options passed to git cms-init
PACKAGES=
INPUT_FILE=

# colors and formatting
RED='\033[31m'
NORMAL='\033[0m'

verbose () {
  if [ "X$VERBOSE" = X1 ]; then
    echo "$@"
  fi
}

while [ "$#" != 0 ]; do
  case "$1" in
    -h | --help )
      usage 0;;
    -d | --debug )
      INITOPTIONS="$INITOPTIONS $1"
      shift; set -x; DEBUG=1 ;;
    -f | --file )
      OPTION=$1; shift
      INPUT_FILE="$1"; shift
      if [ ! "$INPUT_FILE" ]; then
        $ECHO "git cms-addpkg: option $OPTION requires an argument"
        $ECHO
        usage 1
      elif [ ! -r "$INPUT_FILE" ]; then
        $ECHO "git cms-addpkg: file $INPUT_FILE does not exist or is not readable"
        $ECHO
        usage 1
      fi
      unset OPTION
      ;;
    -q | --quiet | -z )
      INITOPTIONS="$INITOPTIONS $1"
      shift; set +x; DEBUG=0; VERBOSE=0 ;;
    -y | --yes )
      INITOPTIONS="$INITOPTIONS $1"
      shift;;
    --https )
      INITOPTIONS="$INITOPTIONS $1"
      shift;;
    --ssh )
      INITOPTIONS="$INITOPTIONS $1"
      shift;;
    -*)
      $ECHO "git cms-addpkg: unknown option $1"; $ECHO; usage 1;;
    *)
      if [ "$INPUT_FILE" == "" ]; then
        # check out a list of packages
        PACKAGES="$PACKAGES $1"
        shift
      else
        # check out a list of packages via -f / --file FILE
        $ECHO "git cms-addpkg: you cannot specify a package and input from file at the same time."
        $ECHO
        usage 1
      fi
    ;;
  esac
done
if [ "$PACKAGES" == "" ] && [ "$INPUT_FILE" == "" ] ; then
  $ECHO "git cms-addpkg: you need to specify at least one package or input file."
  $ECHO
  usage 1
fi

BASH_FULL_VERSION=$((${BASH_VERSINFO[0]} * 10000 + ${BASH_VERSINFO[1]} * 100 + ${BASH_VERSINFO[2]}))
if (( BASH_FULL_VERSION >= 40100 )); then
  # bash 4.1 or newer
  if [ $VERBOSE == 0 ]; then
    # send verbose messages to /dev/null
    exec {verbose}> /dev/null
  else
    # send debug messages to stderr
    exec {verbose}>&2
  fi
  if [ $DEBUG == 0 ]; then
    # send debug messages to /dev/null
    exec {debug}> /dev/null
  else
    # send debug messages to stderr
    exec {debug}>&2
  fi
else
  # bash 4.0 or older
  verbose=11
  if [ $VERBOSE == 0 ]; then
    # send verbose messages to /dev/null
    exec 11> /dev/null
  else
    # send debug messages to stderr
    exec 11>&2
  fi
  debug=12
  if [ $DEBUG == 0 ]; then
    # send debug messages to /dev/null
    exec 12> /dev/null
  else
    # send debug messages to stderr
    exec 12>&2
  fi
fi

if [ "$INPUT_FILE" ]; then
  # check the syntax of the input file
  INVALID=`cat "$INPUT_FILE" | sed -e's|\s*#.*||' | grep -v '^\s*$' | grep -v -E '^/*\w+(/\w+)?/*$' || true`
  if [ -n "$INVALID" ]; then
    $ECHO "Some lines of $INPUT_FILE are not in a valid format:"
    $ECHO "$RED$INVALID$NORMAL"
    exit 1
  fi
  unset INVALID
fi

# initialize the local repository
if [ -z "$CMSSW_BASE" ]; then
  $ECHO "CMSSW environment not setup, please run 'cmsenv' before 'git cms-addpkg'."
  exit 1
fi
if ! [ -d $CMSSW_BASE/src/.git ]; then
  git cms-init $INITOPTIONS
fi

cd $CMSSW_BASE/src

case `git --version` in
  git\ version\ 1.7*)
    # git 1.7.x does not support a leading slash in .gitignore and .git/info/sparse-checkout
    LEADING_SLASH=
  ;;
  *)
    LEADING_SLASH=/
  ;;
esac

# check if using a reference repository
if [ "$CMSSW_GIT_REFERENCE" == "" ] && [ -f $CMSSW_BASE/src/.git/objects/info/alternates ]; then
  CMSSW_GIT_REFERENCE=`cat .git/objects/info/alternates | head -n1`
fi

# if using a personal reference repository, update it from the official one
if [ -e $CMSSW_GIT_REFERENCE/create-`whoami` ]; then
  (cd $CMSSW_GIT_REFERENCE ; git remote update origin >&${verbose} 2>&1)
fi

if [ "$(git status --porcelain --untracked=no | grep '^[ACDMRU]')" ]; then
  $ECHO "${RED}Error:${NORMAL} there are staged but not committed changes on your working tree, please commit or stash them."
  exit 1
fi

if [ "$INPUT_FILE" ]; then
  verbose "Checking out packages"
  verbose "`cat "$INPUT_FILE"`"

  # add the requested package(s) to the sparse checkout
  cp -f $CMSSW_BASE/src/.git/info/sparse-checkout $CMSSW_BASE/src/.git/info/sparse-checkout-new
  cat "$INPUT_FILE" | sed -e's|\s*#.*||' | grep -v '^\s*$' | sed -e "s|[/]*$|/|;s|^/*|${LEADING_SLASH}|" >> $CMSSW_BASE/src/.git/info/sparse-checkout-new
  cat .git/info/sparse-checkout-new | sort -u > $CMSSW_BASE/src/.git/info/sparse-checkout
  rm -f .git/info/sparse-checkout-new
else
  verbose "Checking out packages"
  for PKG_NAME in $PACKAGES; do
    verbose $PKG_NAME
  done

  # add the requested package(s) to the sparse checkout
  cp -f $CMSSW_BASE/src/.git/info/sparse-checkout $CMSSW_BASE/src/.git/info/sparse-checkout-new
  for PKG_NAME in $PACKAGES; do
    echo $PKG_NAME | sed -e "s|[/]*$|/|;s|^/*|${LEADING_SLASH}|" >> $CMSSW_BASE/src/.git/info/sparse-checkout-new
  done
  cat .git/info/sparse-checkout-new | sort -u > $CMSSW_BASE/src/.git/info/sparse-checkout
  rm -f .git/info/sparse-checkout-new
fi

git read-tree -mu HEAD
CURRENT_BRANCH=`git symbolic-ref --short HEAD`

if [ "$INPUT_FILE" ]; then
  for PKG_NAME in `cat $INPUT_FILE`; do
    if [ ! -d "$CMSSW_BASE/src/$PKG_NAME" ]; then
      [ "$HEADER" ] || { $ECHO "\nThese packages do not exist in branch $CURRENT_BRANCH"; HEADER=done; }
      echo $PKG_NAME
    fi
  done
  [ "$HEADER" ] && exit 1
else
  for PKG_NAME in $PACKAGES; do
    if [ ! -d "$CMSSW_BASE/src/$PKG_NAME" ]; then
      [ "$HEADER" ] || { $ECHO "\nThese packages do not exist in branch $CURRENT_BRANCH"; HEADER=done; }
      echo $PKG_NAME
    fi
  done
  [ "$HEADER" ] && exit 1
fi
exit 0
